
const railProfile = Box(3, 11.6).cut(Arc(2).x(-1.6, 1.6).y(3.5)).view();

Shape.registerMethod('beside', (s, o) => s.align('y>x<').and(o.align('y>x>')));

const block = Box(7.8, 7.8)
  .ex(2.5)
  .cut(Arc(5.1 + 0.1).ex(0, 2.5))
  .view();

const halfBlock = block.clip(yz.Box(20).ex(100).rz(45).x(-0.1).y(0.1)).view();

const rail3Base = railProfile
  .scale(0.5)
  .ex(16)
  .rx(1 / 4)
  .align('xy')
  .z(0.8)
  .clip(Box(100).ex(20).z(1.2))
  .rz(1 / 4)
  .align('z>')
  .view({ outline: false })
  .md('rail3Base');

const rail3InnerCurveTrack = rail3Base
  .remesh(20, 10, 5, 3, 2)
  .align('y<')
  .y(112 / 2 - 9 / 2)
  .align('x>')
  .bend(45 / 16)
  .rz(5 / 8 + 0.7 / 360)
  .view();

const rail3OuterCurveTrack = rail3Base
  .remesh(20, 10, 5, 3)
  .align('y>')
  .y(112 / 2 + 9 / 2)
  .align('x>')
  .bend(45 / 16.0)
  .rz(5 / 8 + 0.7 / 360)
  .view();

const rail3CurveTrack = rail3InnerCurveTrack
  .and(rail3OuterCurveTrack)
  .view({ outline: true });

const tile = Box(16)
  .inset(0.1)
  .ex(-3.2)
  .cut(
    Arc(5.1 + 0.1)
      .x(4, -4)
      .y(4, -4)
      .ex(-3.2, -3.2 + 2.5)
  )
  .view()
  .stl('tile');

const mask = Arc(32 * 12)
  .hasAngle(180 + 45, 180 + 90)
  .hull(Point())
  .ex(10)
  .view();

const halfTile = Box(16)
  .clip(
    yz
      .Box(64)
      .rz(5 / 8)
      .ex(100)
  )
  .inset(0.1)
  .ex(-3.2)
  .cut(
    Arc(5.1 + 0.1)
      .x(4, -4)
      .y(4, -4)
      .ex(-3.2, -3.2 + 2.5)
  )
  .view();

const rail3Straight = tile
  .and(
    rail3Base.op((s) =>
      Group(s.align('y<').y(-9 / 2), s.align('y>').y(9 / 2)).clip(
        Box(15.8, 15.8).ex(20)
      )
    )
  )
  .and(yz.Box(9).outline().sketch())
  .view({ outline: false })
  .stl('straight rail');

const rail3Diagonal = Group(
  halfTile
    .rz(1 / 2)
    .x(-8)
    .y(8),
  tile.x(8).y(8),
  tile.x(-8).y(-8),
  halfTile.x(8).y(-8),
  rail3Base
    .scale(Math.sqrt(16 * 16 + 16 * 16) / 16, 1, 1)
    .op((s) => Group(s.align('y<').y(-9 / 2), s.align('y>').y(9 / 2)))
    .rz(1 / 8)
).stl('diagonal_rail');

const rail3Curve = Group(
  rail3CurveTrack.y(-0.85),
  tile.x(8 * -7).y(-8 * 1),
  tile.x(8 * -7).y(-8 * 3),
  tile.x(8 * -5).y(-8 * 3),
  halfTile.x(8 * -5).y(-8 * 5),
  tile.x(8 * -7).y(-8 * 5)
).stl('curve_tile');

const wheel = Group(
  Arc(6).ex(-6, -3.5),
  Arc(10).ex(-3.5, -3.0),
  Arc(4).ex(-3.5, 0)
).view();

const wheelPair = wheel
  .rx(1 / 4)
  .x(0, -14)
  .view();

export const wheelSet = wheel
  .rx(1 / 4)
  .rz(0 / 2, 1 / 2)
  .view();

const side = Group(
  xz.Arc(2.6).ex(-6.5, -4).void(),
  xz.Arc(2.6).ex(-6.5, -4).x(-14).void(),
  xz.Arc(2).ex(-6.5, -4.5),
  xz.Arc(2).ex(-6.5, -4.5).x(-14),
  Hull(xz.Arc(2).ex(-7.5, -6.5), xz.Arc(2).ex(-7.5, -6.5).x(-14))
).view({ outline: false });

const sideBogey = Assembly(
  wheelPair
    .as('wheel')
    .with(side.as('side').color('green'))
    .rx(0, 1 / 2),
  Group(Arc(4.9).ex(3.2, 4.9).y(4, -4), Box(7.8, 15.8).ex(3.2))
    .x(-7)
    .z(6.1)
    .as('block')
    .material('transparent')
    .color('gray'),
  Group(
    Arc(3.6).ex(1.5).void(),
    Arc(4.5).ex(1.5, 3.6).void(),
    Arc(3).ex(1.7),
    Arc(3.5).ex(1.7, 3.3),
    Orb(3)
  )
    .x(-7)
    .z(5.5)
    .as('side')
    .color('green'),
  Group(
    xz.Arc(2).clip(xz.Box(2, 1.5)).ex(-7, 7).z(0).x(-7),
    Arc(2).ex(-1, 5).x(-7).y(6.5, -6.5),
    xz.Arc(2).ex(7.5, -7.5).x(-7).z(5)
  )
    .as('side')
    .color('green')
)
  .view({
    outline: false,
    prepareView: (s) => s.clip(yz.Box(100).ex(100)),
  })
  .stl('bogey_frame', { prepareStl: keep('side') })
  .stl('bogey_wheel', {
    prepareStl: (s) => s.keep('wheel').rx(1 / 4),
  })
  .stl('bogey_block', { prepareStl: keep('block') })
  .md('Bogey');

export const bogey = sideBogey;

const coupler = Group(
  Arc(4.9 + 0)
    .ex(3.2, 4.9)
    .y(4, -4),
  Box(7.8, 15.8).ex(3.2)
)
  .align('xyz>')
  .and(
    Arc(10)
      .cut(yz.Box(50).ex(50).x(-0.2))
      .ex(3.2 + 0.5)
      .x(8 / 2)
  )
  .z(3.2 / -2)
  .as('coupler')
  .material('transparent')
  .color('gray')
  .with(
    Group(
      xz
        .Arc(3.3)
        .x(4.6 - 3.3 / 2)
        .loft(...seq((n) => rz(n), { from: 3 / 4, to: 5 / 4, by: 1 / 32 }))
        .x(-3.4)
        .void(),
      Arc(3.2).ex(5, -1).x(-0.5).void()
    )
      .x(7.3)
      .z(0.25)
  )

  .view({ outline: false })
  .stl('coupler', { prepareStl: drop('magnet') });

const symmetry = rail3Curve
  .x(8 * 5)
  .y(8 * 5)
  .and(
    rail3Curve
      .x(8 * 5)
      .y(8 * 5)
      .rz(1 / 2)
  )
  .and(
    rail3Straight
      .rz(1 / 4)
      .x(-32 / 2)
      .y(96 / 2)
  )
  .and(
    rail3Diagonal
      .rz(1 / 8)
      .x(32 / 2)
      .y(-96 / 2)
  )
  .and(sideBogey.rz(1 / 8).z(5.5))
  .view({ outline: false });

const rail3CurveStart = rail3Curve
  .x(8 * 7)
  .y(8 * 1)
  .clip(Box(16).ex(10))
  .view({ outline: false });

const slider = tile
  .x(16, 0, -16)
  .cut(Box(48, 16).ex(-0.7))
  .and(
    yz
      .Group(Triangle(3).void(), Triangle(2))
      .scale(1, 2, 1)
      .rx(-1 / 4)
      .ex(23.9, -23.9)
      .align('z<')
      .z(0.5)
      //.op((s) => Group(s.scale(1.1, 1.1, 1.1).void(), s))
      .clip(Box(48, 16).ex(10, -0.7))
      .y(-4, 0, 4)
  )
  .stl('slider');

const point = Group(
  rail3Straight
    .rz(1 / 4)
    .clip(Box(16).ex(10))
    .x(6.5),
  rail3CurveStart,
  Box(23.8, 15.8)
    .x(4)
    .ex(-3.2 / 2)
)
  .clip(Box(100).ex(10, -0.7))
  .with(slider.void())
  .view({ outline: false })
  .stl('point');

const junction = Group(
  slider.y(8 * 2),
  //point.y(8 * 2).x(-4),
  rail3Straight.rz(1 / 4),
  rail3Straight.rz(1 / 4).y(8 * -2),
  rail3Curve
    .x(8 * 7)
    .y(8 * 3)
    .cut(
      Box(24, 16)
        .ex(10, -10)
        .y(8 * 2)
    )
)
  .material('copper')
  .and(
    Box(2, 12).ex(2.4).x(-1).y(-6),
    Box(2, 12)
      .ex(2.4)
      .rz(-32 / 360)
      .x(8)
      .y(-5),
    Box(2, 14)
      .ex(2.4)
      .rz(-22 / 360)
      .x(6)
      .y(0)
  )
  .with(
    Box(2.5, 10)
      .ex(6)
      .x(3.5 - 0.25 - 9 + 2.5)
      .y(3)
      .void(),
    Box(2, 4)
      .ex(2.5)
      .rz(-45 / 360)
      .x(-1)
      .y(5.5)
      .void(),
    Box(2, 8)
      .ex(8)
      .rz(-60 / 360)
      .x(6)
      .y(-11.5)
      .void(),
    Box(6, 20).ex(6).x(4).y(-2).void()
  )
  .stl('junction');
