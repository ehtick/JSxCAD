const anchor = yz
  .Arc(2)
  .ex(7, -7)
  .cut(xz.Arc(1).ex(2, -2).z(0.75))
  .y(-1.5 / 2 - 1)
  .z(2 / 2 + 0.5)
  .view();

const sheath = Arc(14.1).ex(60, -15).void().view().stl('sheath');

const Arm = (size) =>
  Group(
    Box(size)
      .offset(2)
      .rz(1 / 8)
      .x(0),
    size < 9
      ? Box(9 - size, 5)
          .align('x>')
          .x(-7)
      : undefined,
    Box(10).cut(Box(5.1)).clip(Box(10).x(2.5)).x(-12)
  )
    .cut(Box(20, 1).align('x>').x(-7))
    .cut(Box(size).rz(1 / 8))
    .ex(2);

const arm3 = Arm(3.0).view().stl('arm_3');

const arm5 = Arm(5).view().stl('arm_5');

const arm7 = Arm(7).view().stl('arm_7');
const arm8 = Arm(8).view().stl('arm_8');
const arm9 = Arm(9).view().stl('arm_9');

const sheath2 = Group(
  sheath,
  Box(5).ex(60).y(-12),
  arm7
    .rz(-1 / 4)
    .z(40)
    .void()
).view();

const Sabot = (d) =>
  Arc(14)
    .cut(Arc(d + 0.2))
    .ex(2, 22)
    .and(
      Arc(16)
        .cut(Arc(d + 0.2))
        .ex(2)
    )
    .view()
    .stl('sabot');

const foot = Orb(14)
  .hasSides(20)
  .with(Orb(12).void())
  .clip(Box(20).ex(100).z(-3))
  .cut(Box(20).ex(100).z(6))
  .with(Orb(10.7).hasSides(10).material('steel').void())
  .align('z>')
  .z(2.8)
  .view({ outline: false })
  .stl('foot');

const footWithGuide = foot
  .and(
    Arc(5)
      .ex(11.8, 20)
      .op((s) => s.x(2).and(s.x(-2)))
  )
  .cut(xz.Arc(3).z(15).ex(5, -5))
  .cut(Arc(5).ex(100))
  .view({ outline: false });

const bearing = Orb(10.8).view({ outline: false }).stl('bearing_108');

const puckBase = Group(
  yz
    .Arc(5)
    .clip(yz.Box(5).z(-5 / 2))
    .add(yz.Box(3, 2))
    .cut(yz.Box(1, 8).z(-2))
    .op((s) => s.ex(5, 50).and(s.ex(-5, -50)))
    .align('z>')
    .with(foot.align('z>').x(56, -56))
    .y(1),
  xz
    .Arc(5)
    .clip(xz.Box(5).z(-5 / 2))
    .add(xz.Box(3, 2))
    .cut(xz.Box(1, 8).z(-2))
    .ex(-5, -50)
    .align('z>')
    .with(foot.y(56).align('z>')),
  xz
    .Arc(5)
    .clip(xz.Box(5).z(-5 / 2))
    .add(xz.Box(3, 2))
    .cut(xz.Box(1, 8).z(-2))
    .ex(5, 50 + 30)
    .align('z>')
    .with(footWithGuide.y(-56 - 30).align('z>')),
  Group(
    Arc(42 + 23).ex(10 - 5 / 2 + 2, 10 - 5 / 2 + 1),
    Arc(40 + 23).ex(10 - 5 / 2 + 1, 10 - 5 / 2 - 1),
    Arc(42 + 23).ex(10 - 5 / 2 - 1, 0)
  )
).view({ outline: false });

const puck5 = puckBase
  .z(5 / 2)
  .cut(Arc(55).ex(20))
  .and(
    sheath2
      .rz(1 / 2)
      .rx(-1 / 8)
      .clip(
        Box(5000)
          .ex(1000)
          .z(5 / 2)
      )
  )
  .and(
    Box(5, 30)
      .align('y>')
      .z(5 / 2)
      .ex(1)
      .cut(Arc(2).ex(20))
      .cut(
        Arc(5)
          .ex(20)
          .rx(-1 / 8)
      )
  )
  .view({ outline: false })
  .stl('puck5');

const cam = Spiral((a) => [[a / 15 + 11]], { to: 200 }) // 15 -> 30
  .close()
  .cut(Box().hasC1(5, 0).hasC2(60, 60))
  .cut(Arc(4.9))
  .ex(2)
  .view()
  .stl('cam');

const servoMount = Assembly(
  Box(10, 23 + 4).ex(-5 / 2, 12.4 + 3),
  Box(10, 22.8 + 0.5 - 0.2)
    .ex(1, 12.3 + 0.5 + 0.2 + 0.5 - 0.2)
    .void()
)
  .align('z>')
  .clip(yz.Arc(30, 40).ex(5, -5).z(13.5))
  .with(
    xz
      .Arc(5)
      .clip(xz.Box(5).z(-5 / 2))
      .align('z>')
      .ex(120)
      .grow(0.1)
      .void()
      .y(80)
  )
  .cut(
    Box(6, 23 + 4)
      .ex(12.3 + 0.5 + 0.2 + 0.5 + 1)
      .color('green')
      .x(2)
      .z(5 / 2 + 1)
  )
  .view()
  .rx(1 / 2)
  .align('xyz>')
  .stl('servo_mount');

const servoMount2 = Assembly(
  Box(10, 23 + 4).ex(-5 / 2, 12.4 + 3),
  Box(10, 22.8 + 0.5)
    .ex(1, 12.3 + 0.5 + 0.2 + 0.5)
    .void()
)
  .align('z>')
  .cut(
    Box(6, 23 + 4)
      .ex(12.3 + 0.5 + 0.2 + 0.5 + 1)
      .color('green')
      .x(2)
      .z(5 / 2 + 1)
  )
  .cut(xz.Box(4, 2).ex(20, -20))
  .view()
  .rx(1 / 2)
  .align('xyz>')
  .stl('servo_mount_2');

const tab = Box(2, 20).ex(4).view().stl('tab');
