md`
# File IO
JSxCAD supports importing and exporting .svg and .stl file types`;

md`
One thing to note is that output may consist of multiple 'pages'.

A filename like 'teapot' will have the page number and filetype appended, so it may produce 'teapot_0.stl', 'teapot_1.stl', etc.
`;

md`
---
### Exporting .stl
Creates an option to download the shape as an stl file. A view is created to show what will be downloaded.`;

await Arc(10, 10, 10).stl('fileName');

md`
---
### Exporting .svg
Creates an option to download the shape as a svg file. A view is created to show what will be downloaded.`;

await Arc(10).svg('fileName');

md`
---
### Importing .stl
Imports a .stl file which can then be used as geometry. A best effort is made to handle bad geometry in the .stl file.`;

const importedStl = await Stl('https://jsxcad.js.org/stl/teapot.stl');
await importedStl.view();

md`
---
### Importing .svg
Imports a .svg file which can then be used as geometry.`;

const importedSvg = await Svg('https://jsxcad.js.org/svg/rocket.svg', { fill: false });
await importedSvg.by(align('xy')).view();

await importedSvg.by(align('xy')).scaleToFit(10).fill().ez(2).untag('color:#090000').view();

import { ThreejsCollada, ThreejsSvg } from '@jsxcad/api-threejs';

await ThreejsSvg('https://jsxcad.js.org/svg/rocket.svg').by(align('xy')).view();

await ThreejsCollada('https://jsxcad.js.org/collada/duck_triangles.dae').rx(1/4).view();
