import '@jsxcad/algorithm-cgal';

import { boot } from '@jsxcad/sys';
import { fromPolygonsToGraph } from '@jsxcad/geometry';
import test from 'ava';
import { toSvg } from './toSvg.js';

test.beforeEach(async (t) => {
  await boot();
});

const triangle = [
  [1, 0, 0],
  [-0.4999999999999998, 0.8660254037844387, 0],
  [-0.5000000000000004, -0.8660254037844385, 0],
];

test('Triangle', async (t) => {
  const svg = await toSvg(
    {
      type: 'group',
      content: [
        fromPolygonsToGraph({ tags: ['color:blue'] }, [{ points: triangle }]),
        {
          type: 'paths',
          paths: [triangle],
          tags: ['color:red'],
        },
      ],
    },
    { padding: 2 }
  );
  t.is(
    new TextDecoder('utf8').decode(svg),
    `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by jsxcad -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">
<svg baseProfile="tiny" height="1.732050807568878mm" width="1.5000000000000018mm" viewBox="-0.5000000000000009 -0.8660254037844389 1.5000000000000018 1.732050807568878" version="1.1" stroke="black" stroke-width=".1" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill="#0000ff" stroke="#0000ff" d="M-0.4999999999999998 -0.8660254037844386 L-0.5000000000000004 0.8660254037844384 L1 0 z"/>
<path fill="#ff0000" stroke="#ff0000" d="M1 0 L-0.4999999999999998 -0.8660254037844387 L-0.5000000000000004 0.8660254037844385 z"/>
</svg>`
  );
});

test('TriangleWithHole', async (t) => {
  const geometry = {
    type: 'graph',
    tags: [],
    graph: {
      isClosed: false,
      isLazy: false,
      provenance: 'fromPolygonsWithHoles',
      edges: [
        { point: 0, next: 2, twin: 1, facet: 0, face: 0 },
        { point: 1, next: 10, twin: 0, facet: 2, face: 0 },
        { point: 1, next: 4, twin: 3, facet: 0, face: 0 },
        { point: 2, next: 6, twin: 2, facet: 1, face: 0 },
        { point: 2, next: 0, twin: 5, facet: 0, face: 0 },
        { point: 0, next: 21, twin: 4, facet: -1, face: -1 },
        { point: 1, next: 8, twin: 7, facet: 1, face: 0 },
        { point: 3, next: 13, twin: 6, facet: -1, face: -1 },
        { point: 3, next: 3, twin: 9, facet: 1, face: 0 },
        { point: 2, next: 17, twin: 8, facet: 4, face: 0 },
        { point: 0, next: 12, twin: 11, facet: 2, face: 0 },
        { point: 4, next: 19, twin: 10, facet: 5, face: 0 },
        { point: 4, next: 1, twin: 13, facet: 2, face: 0 },
        { point: 1, next: 23, twin: 12, facet: -1, face: -1 },
        { point: 0, next: 16, twin: 15, facet: 3, face: 0 },
        { point: 5, next: 5, twin: 14, facet: -1, face: -1 },
        { point: 5, next: 18, twin: 17, facet: 3, face: 0 },
        { point: 3, next: 20, twin: 16, facet: 4, face: 0 },
        { point: 3, next: 14, twin: 19, facet: 3, face: 0 },
        { point: 0, next: 22, twin: 18, facet: 5, face: 0 },
        { point: 5, next: 9, twin: 21, facet: 4, face: 0 },
        { point: 2, next: 15, twin: 20, facet: -1, face: -1 },
        { point: 3, next: 11, twin: 23, facet: 5, face: 0 },
        { point: 4, next: 7, twin: 22, facet: -1, face: -1 },
      ],
      points: [
        [6.123233995736766e-16, -10, 0],
        [-4.330127018922194, 2.4999999999999996, 0],
        [-8.660254037844387, 4.999999999999999, 0],
        [4.330127018922194, 2.4999999999999996, 0],
        [3.061616997868383e-16, -5, 0],
        [8.660254037844387, 4.999999999999999, 0],
      ],
      exactPoints: [
        ['6209697000026889/10141204801825835211973625643008', '-10', '0'],
        [
          '-4875289607221227/1125899906842624',
          '5629499534213119/2251799813685248',
          '0',
        ],
        [
          '-4875289607221227/562949953421312',
          '5629499534213119/1125899906842624',
          '0',
        ],
        [
          '4875289607221227/1125899906842624',
          '5629499534213119/2251799813685248',
          '0',
        ],
        ['6209697000026889/20282409603651670423947251286016', '-5', '0'],
        [
          '4875289607221227/562949953421312',
          '5629499534213119/1125899906842624',
          '0',
        ],
      ],
      faces: [
        {
          plane: [0, 0, 0.9999999999999999, 0],
          exactPlane: [
            '0',
            '0',
            '988826207500869911996977292782123650041178059529/988826207500869987519282869341438525854137188352',
            '0',
          ],
        },
      ],
      facets: [
        { edge: 4 },
        { edge: 8 },
        { edge: 12 },
        { edge: 18 },
        { edge: 20 },
        { edge: 22 },
      ],
    },
  };
  const svg = await toSvg(geometry);
  t.is(
    new TextDecoder('utf8').decode(svg),
    `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by jsxcad -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">
<svg baseProfile="tiny" height="15.00000000000001mm" width="17.32050807568879mm" viewBox="-8.660254037844394 -10.000000000000007 17.32050807568879 15.00000000000001" version="1.1" stroke="black" stroke-width=".1" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill="#000000" stroke="#000000" d="M8.660254037844387 -4.999999999999998 L-8.660254037844387 -4.999999999999998 L6.123233995736766e-16 9.999999999999998 z M-4.330127018922194 -2.499999999999999 L4.330127018922194 -2.499999999999999 L3.061616997868383e-16 4.999999999999999 z"/>
</svg>`
  );
});
