import {
  getNonVoidPaths,
  getNonVoidSegments,
  isClosedPath,
  isNotTypeWire,
  isTypeWire,
  measureBoundingBox,
  scale,
  toPolygonsWithHoles,
  toTransformedGeometry,
} from '@jsxcad/geometry';

import { toRgbColorFromTags } from '@jsxcad/algorithm-color';

const equals = (a, b) => a && b && a[0] === b[0] && a[1] === b[1];

const X = 0;
const Y = 1;

export const toSvg = async (
  baseGeometry,
  { padding = 0, definitions } = {}
) => {
  const geometry = toTransformedGeometry(scale([1, -1, 1], await baseGeometry));
  const [min, max] = measureBoundingBox(geometry);
  const width = max[X] - min[X];
  const height = max[Y] - min[Y];

  const viewBox = `${min[X]} ${-max[Y]} ${width} ${height}`;
  const svg = [
    `<?xml version="1.0" encoding="UTF-8"?>`,
    `<!-- Generated by jsxcad -->`,
    `<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1 Tiny//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd">`,
    `<svg baseProfile="tiny" height="${height}mm" width="${width}mm" viewBox="${viewBox}" version="1.1" stroke="black" stroke-width=".1" fill="none" xmlns="http://www.w3.org/2000/svg">`,
  ];

  for (const { tags, polygonsWithHoles } of toPolygonsWithHoles(geometry)) {
    for (const polygonWithHoles of polygonsWithHoles) {
      const { points, holes } = polygonWithHoles;
      const color = toRgbColorFromTags(tags, definitions);
      const d = [];
      points.forEach((point, index) =>
        d.push(`${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`)
      );
      d.push('z');
      for (const { points } of holes) {
        points.forEach((point, index) =>
          d.push(`${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`)
        );
        d.push('z');
      }
      if (isTypeWire({ tags })) {
        svg.push(`<path fill="none" stroke="${color}" d="${d.join(' ')}"/>`);
      } else {
        svg.push(
          `<path fill="${color}" stroke="${color}" d="${d.join(' ')}"/>`
        );
      }
    }
  }

  for (const { tags, paths } of getNonVoidPaths(geometry)) {
    const color = toRgbColorFromTags(tags, definitions);
    for (const path of paths) {
      if (isClosedPath(path)) {
        const d = path.map(
          (point, index) => `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`
        );
        if (isTypeWire({ tags })) {
          svg.push(
            `<path fill="none" stroke="${color}" d="${d.join(' ')} z"/>`
          );
        } else {
          svg.push(
            `<path fill="${color}" stroke="${color}" d="${d.join(' ')} z"/>`
          );
        }
      } else {
        const d = path
          .slice(1)
          .map(
            (point, index) =>
              `${index === 0 ? 'M' : 'L'}${point[0]} ${point[1]}`
          );
        svg.push(`<path fill="none" stroke="${color}" d="${d.join(' ')}"/>`);
      }
    }
  }

  for (const { tags, segments } of getNonVoidSegments(geometry)) {
    const color = toRgbColorFromTags(tags, definitions);
    let d = [];
    let first;
    let last;
    for (const [start, end] of segments) {
      if (!equals(start, last)) {
        d.push(`M ${start[0]} ${start[1]}`);
      }
      d.push(`L ${end[0]} ${end[1]}`);
      if (!first) {
        first = start;
      }
      last = end;
    }
    if (equals(first, last)) {
      d.pop();
      d.push('z');
    }
    const fill = isNotTypeWire({ tags }) ? color : 'none';
    const stroke = isTypeWire({ tags }) ? color : 'none';
    svg.push(`<path fill="${fill}" stroke="${stroke}" d="${d.join(' ')}"/>`);
  }

  svg.push('</svg>');
  const output = svg.join('\n');
  return new TextEncoder('utf8').encode(output);
};
