import { initCgal } from './getCgal.js';
import { loft } from './loft.js';

import test from 'ava';

test.beforeEach(async (t) => {
  await initCgal();
});

test('True', (t) => {
  t.true(true);
});

false &&
  test('Loft Triangle', (t) => {
    const lofted = loft([
      {
        type: 'polygonsWithHoles',
        polygonsWithHoles: [
          {
            points: [
              [0, 5],
              [-4.328523862375138, -2.5027746947835734],
              [4.328523862375138, -2.5027746947835734],
            ],
            holes: [],
          },
        ],
        plane: [0, 0, 1, 0],
        exactPlane: '0 0 1 0',
        matrix: [
          0.9809596344249809,
          -0.1942117288651942,
          0,
          0,
          0.1942117288651942,
          0.9809596344249809,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          '1288/1313 255/1313 0 0 -255/1313 1288/1313 0 0 0 0 1 0 1',
        ],
        tags: [],
      },
      {
        type: 'polygonsWithHoles',
        polygonsWithHoles: [
          {
            points: [
              [0, 5],
              [-4.328523862375138, -2.5027746947835734],
              [4.328523862375138, -2.5027746947835734],
            ],
            exactPoints: ['0 5', '-3900/901 -2255/901', '3900/901 -2255/901'],
            holes: [],
          },
        ],
        plane: [0, 0, 1, 0],
        exactPlane: '0 0 1 0',
        matrix: [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          10,
          1,
          '1 0 0 0 0 1 0 0 0 0 1 10 1',
        ],
        tags: [],
      },
    ]);
    t.deepEqual(JSON.parse(JSON.stringify(lofted)), [
      {
        type: 'graph',
        matrix: [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          '1 0 0 0 0 1 0 0 0 0 1 0 1',
        ],
        tags: [],
        graph: {
          serializedSurfaceMesh:
            '8\n1275/1313 6440/1313 0 971 4905 0\n-269061769230088269/56857945295552512 -183590990188252447/113715890591105024 0 -4732 -1614 0\n2779245182086397487/739153288842182656 -4872160025288545741/1478306577684365312 0 3760 -3296 0\n0 5 10 0 5000 10000\n3900/901 -2255/901 10 4329 -2503 10000\n-3900/901 -2255/901 10 -4329 -2503 10000\n1275/1313 6440/1313 0 971 4905 0\n2779245182086397487/739153288842182656 -4872160025288545741/1478306577684365312 0 3760 -3296 0\n\n8\n3 3 0 2\n3 3 2 5\n3 5 2 4\n3 4 2 0\n3 4 0 3\n3 7 6 1\n3 5 4 3\n3 6 7 1\n',
          hash: 'Ba8yz+AlHcMdmPdOW1MeO2Ya+bSsefV7XIu6bsywS0k=',
        },
      },
    ]);
  });
